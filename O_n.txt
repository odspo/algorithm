### 时间复杂度

定义：存在常数c，是的当N$$\geq$$c时，T(N)$$\geq$$f(N)，表示为T(n)=O(f(n))

#### 常数项

T(n)=c时，我们称该算法的复杂度为O(1)；如果O(n)不为常数项时，直接将常数项省略。

#### 高次项与低次项

高次项对函数的增长速度的影响是最大的。$$n^3$$的增长速度远超$$n^2$$。同时因为要求精度不高，所以直接省略低次项。

#### 系数

因为函数的阶数对函数的增长速度的影响是最显著的，所以我们忽略与最高阶相乘的常数。

#### 法则

##### 对于一或多个循环，假设循环体的时间复杂度为O(n)，循环次数为a,b,c...，则这个循环的时间复杂度为O(n$*$a$*$b$*$c$*$...)。

##### 对于条件判断语句，总的时间复杂度等于其中时间复杂度最大的路径的时间复杂度。

##### 例：

```c++
void aFunc(int n) {
    for (int i = 2; i < n; i++) {
        i *= 2;
        printf("%i\n", i);
    }
}
```

设循环次数为t，则循环条件满足$$2^t$$<n。

则t=$$\log_2{n}$$，即T(n) = $$\log_2{n}$$，即为O(log n)。

#### 常见的算法时间复杂度：

O(1)<O(logn)<O(n)<O(nlogn)<O($$n^2$$)<O($$n^3$$)<{O($$2^n$$)<O(n!)<O($$n^n$$)}

大括号内的算法时间复杂度大的离谱。

### 空间复杂度

- 空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度；

- 一个算法在计算机上占用的内存包括：程序代码所占用的空间，输入输出数据所占用的空间，辅助变量所占用的空间。

- 通常来说，只要算法不涉及动态分配的空间，以及递归、栈所需的空间，空间复杂度为O(1)。
- 若算法执行时所需的辅助空间相对于输入数据量而言是个常数，则称此算法为原地工作，空间复杂度为O(1)。
- ![1538874203501](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1538874203501.png)

